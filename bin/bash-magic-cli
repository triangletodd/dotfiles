#!/usr/bin/env bash

magic_prefix="${0##*/}"
magic_path="${0%/*}"

option_debug=""

function _debug() {
  if [[ -n "${option_debug}" ]]; then
    echo "Debug:" "$@" >&2
  fi
}

function list_commands() {
  local command
  for command in "${magic_path}/${magic_prefix}"-*; do
    if can_use_file "$command"; then
      _debug "Found $command, looks usable"
      info="$(get_command_info "$command")"
      printf "  %10ls   %ls\n" "${command#*/${magic_prefix}-}" "$info"
    else
      _debug "Found $command, but wasn't usable"
    fi
  done
  return 0
}

function get_command_info() {
  local command="$1"
  local file_type
  local lines
  local info
  
  file_type="$(file_exec_type "$command")"

  if [[ "$file_type" == "script" ]]; then
    _debug "Getting info about $command as script-type"
    mapfile -t -n 1 -s 1 lines <"$command"
    info="${lines[*]}"
    if [[ "${info:0:1}" != "#" ]]; then
      info="!!could not get info about $command!!"
    else
      info="${info#\#}"
      info="${info# }" 
      # ^-- This is a separate assignment so that deleting the # doesn't 
      #      depend on there being a leading space
    fi
    echo "$info"
  elif [[ "$file_type" == "binary" ]]; then
    _debug "Getting info about $command as binary-type"
    info="$(command) -w"
    echo "$info"
  else
    echo "!!could not get info about $command!!"
  fi
}

function can_use_file() {
  local filename="$1"
  if [[ -r "$filename" ]] && [[ -x "$filename" ]]; then
    return 0
  else
    return 1
  fi
}

function file_exec_type() {
  # Attempts to identify what a candidate command is,
  #  so we know what to do to get its whatis info
  # Could use the "file" command for this,
  #  but we pretty much only care about two types 
  #  on Linux so this method tries to not use any
  #  external processes instead
  local file="$1"
  read -n 4 header <"$file"

  if [[ "${header:0:2}" == "#!" ]]; then
    _debug "Detected $file as a script"
    echo "script"
    return 0
  elif [[ "${header:0:4}" == "\x7fELF" ]]; then
    _debug "Detected $file was a binary executable"
    echo "binary"
    return 0
  else
    _debug "Don't know what kind of file $file is"
    echo "unknown"
    return 1
  fi
}

function run_command() {
  :
}

function usage() {
  list_commands
}

function main() {
  case "${1:-}" in
    "" | "help")
      usage
      exit
      ;;
    "list")
      list_commands
      exit
      ;;
    "-*")
      echo "Error: Unknown option" >&2
      exit 1
      ;;
    *)
      if can_use_file "$0-$1"; then
        command="$1"
        shift
        "$0-${command}" "$@"
      fi
      ;;
  esac
      
}

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
  main "$@"
fi
